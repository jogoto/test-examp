pipeline {
    agent {
        docker {
            image 'mcr.microsoft.com/dotnet/sdk:6.0'
            args '-u root'
        }
    }
    
    environment {
        DOTNET_VERSION = '6.0'
        SOLUTION_FILE = 'HouseRentingSystem.sln'
        TEST_PROJECTS = 'HouseRentingSystem.Tests,HouseRentingSystem.UnitTests'
        COVERAGE_DIR = 'coverage'
        TEST_RESULTS_DIR = 'test-results'
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–æ–¥–∞ –æ—Ç Git
                    checkout scm
                    
                    // –†–µ—à–∞–≤–∞–Ω–µ –Ω–∞ Git ownership –ø—Ä–æ–±–ª–µ–º–∞
                    sh '''
                        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –Ω–∞ Git –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                        git config --global --add safe.directory /var/jenkins_home/workspace/${JOB_NAME}
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—è branch
                        git rev-parse --abbrev-ref HEAD
                    '''
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–º–µ –≤ main branch
                    def currentBranch = sh(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                    
                    echo "–¢–µ–∫—É—â–∏—è—Ç branch –µ: ${currentBranch}"
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–º–µ –≤ main branch
                    if (currentBranch != 'main') {
                        error "‚ùå Pipeline –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ —Å–∞–º–æ –≤ main branch! –¢–µ–∫—É—â–∏—è—Ç branch –µ: ${currentBranch}"
                    }
                    
                    echo "‚úÖ –ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –≤ main branch - –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ..."
                }
            }
        }
        
        stage('Restore Dependencies') {
            steps {
                script {
                    echo '–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ NuGet –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...'
                    sh 'dotnet restore ${SOLUTION_FILE}'
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    echo '–ö–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ...'
                    sh 'dotnet build ${SOLUTION_FILE} --configuration Release --no-restore'
                }
            }
            post {
                always {
                    // –ê—Ä—Ö–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ build –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏
                    archiveArtifacts artifacts: '**/bin/Release/**/*.dll', fingerprint: true
                    archiveArtifacts artifacts: '**/bin/Release/**/*.exe', fingerprint: true
                }
            }
        }
        
        stage('Test') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        script {
                            echo '–ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –Ω–∞ Unit —Ç–µ—Å—Ç–æ–≤–µ...'
                            sh '''
                                dotnet test HouseRentingSystem.UnitTests/HouseRentingSystem.UnitTests.csproj \
                                    --configuration Release \
                                    --no-build \
                                    --logger "trx;LogFileName=unit-tests.trx" \
                                    --results-directory ${TEST_RESULTS_DIR} \
                                    --collect:"XPlat Code Coverage" \
                                    --settings HouseRentingSystem.UnitTests/CodeCoverage.runsettings
                            '''
                        }
                    }
                    post {
                        always {
                            // –ê—Ä—Ö–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ unit test —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
                            publishTestResults testResultsPattern: '${TEST_RESULTS_DIR}/**/*.trx'
                        }
                    }
                }
                
                stage('Integration Tests') {
                    steps {
                        script {
                            echo '–ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –Ω–∞ Integration —Ç–µ—Å—Ç–æ–≤–µ...'
                            sh '''
                                dotnet test HouseRentingSystem.Tests/HouseRentingSystem.Tests.csproj \
                                    --configuration Release \
                                    --no-build \
                                    --logger "trx;LogFileName=integration-tests.trx" \
                                    --results-directory ${TEST_RESULTS_DIR} \
                                    --collect:"XPlat Code Coverage" \
                                    --settings HouseRentingSystem.Tests/CodeCoverage.runsettings
                            '''
                        }
                    }
                    post {
                        always {
                            // –ê—Ä—Ö–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ integration test —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
                            publishTestResults testResultsPattern: '${TEST_RESULTS_DIR}/**/*.trx'
                        }
                    }
                }
            }
        }
        
        stage('Code Coverage') {
            steps {
                script {
                    echo '–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç –∑–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ –Ω–∞ –∫–æ–¥–∞...'
                    sh '''
                        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ
                        mkdir -p ${COVERAGE_DIR}
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç –∑–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ
                        dotnet test ${SOLUTION_FILE} \
                            --configuration Release \
                            --no-build \
                            --collect:"XPlat Code Coverage" \
                            --results-directory ${COVERAGE_DIR}
                    '''
                }
            }
            post {
                always {
                    // –ê—Ä—Ö–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ coverage —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
                    archiveArtifacts artifacts: '${COVERAGE_DIR}/**/*', fingerprint: true
                }
            }
        }
        
        stage('Publish Test Results') {
            steps {
                script {
                    echo '–ü—É–±–ª–∏–∫—É–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ...'
                    // –ü—É–±–ª–∏–∫—É–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ test —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
                    publishTestResults testResultsPattern: '**/*.trx'
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'Pipeline –∑–∞–≤—ä—Ä—à–∏ —Å —Ä–µ–∑—É–ª—Ç–∞—Ç: ' + currentBuild.result
                
                // –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ workspace
                cleanWs()
            }
        }
        success {
            script {
                echo '‚úÖ Pipeline –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!'
                echo 'ÔøΩÔøΩ –¢–µ—Å—Ç–æ–≤–µ—Ç–µ —Å–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ'
                echo 'üìà –û—Ç—á–µ—Ç–∏—Ç–µ –∑–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ –Ω–∞ –∫–æ–¥–∞ —Å–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏'
            }
        }
        failure {
            script {
                echo '‚ùå Pipeline –∑–∞–≤—ä—Ä—à–∏ —Å –≥—Ä–µ—à–∫–∞!'
                echo 'üîç –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ª–æ–≥–æ–≤–µ—Ç–µ –∑–∞ –ø–æ–≤–µ—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
            }
        }
        unstable {
            script {
                echo '‚ö†Ô∏è Pipeline –∑–∞–≤—ä—Ä—à–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ (—Ç–µ—Å—Ç–æ–≤–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–∏)'
                echo 'üîç –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –æ—Ç —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ'
            }
        }
    }
} 