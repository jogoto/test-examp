pipeline {
    agent {
        docker {
            image 'mcr.microsoft.com/dotnet/sdk:6.0'
            args '-u root'
        }
    }
    
    environment {
        DOTNET_VERSION = '6.0'
        SOLUTION_FILE = 'HouseRentingSystem.sln'
        COVERAGE_DIR = 'coverage'
        TEST_RESULTS_DIR = 'test-results'
    }
    
    stages {
        stage('Setup Git') {
            steps {
                script {
                    echo '–ù–∞—Å—Ç—Ä–æ–π–≤–∞–Ω–µ –Ω–∞ Git –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è...'
                    
                    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –Ω–∞ Git –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    sh '''
                        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –Ω–∞ Git –∑–∞ –≤—Å–∏—á–∫–∏ workspace –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        git config --global --add safe.directory '*'
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Git –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
                        git config --global --list | grep safe.directory
                    '''
                }
            }
        }
        
        stage('Checkout') {
            steps {
                script {
                    // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–æ–¥–∞ –æ—Ç Git
                    checkout scm
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—è branch –∏ –Ω–∞—Å—Ç—Ä–æ–π–≤–∞–Ω–µ –Ω–∞ main
                    sh '''
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—è branch
                        echo "–¢–µ–∫—É—â–∏—è—Ç branch –ø—Ä–µ–¥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: $(git rev-parse --abbrev-ref HEAD)"
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ main branch —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
                        if git show-ref --verify --quiet refs/remotes/origin/main; then
                            echo "Main branch —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ remote"
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–º–µ –≤ detached HEAD state
                            if [ "$(git rev-parse --abbrev-ref HEAD)" = "HEAD" ]; then
                                echo "–í detached HEAD state - –ø—Ä–µ–≤–∫–ª—é—á–≤–∞–º–µ –∫—ä–º main"
                                git checkout -b main origin/main
                            fi
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—è branch —Å–ª–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
                            echo "–¢–µ–∫—É—â–∏—è—Ç branch —Å–ª–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: $CURRENT_BRANCH"
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–º–µ –≤ main branch
                            if [ "$CURRENT_BRANCH" = "main" ]; then
                                echo "‚úÖ –ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –≤ main branch - –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ..."
                            else
                                echo "‚ùå –ù–µ —Å–º–µ –≤ main branch! –¢–µ–∫—É—â–∏—è—Ç branch –µ: $CURRENT_BRANCH"
                                exit 1
                            fi
                        else
                            echo "‚ùå Main branch –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ remote!"
                            exit 1
                        fi
                    '''
                }
            }
        }
        
        stage('Restore Dependencies') {
            steps {
                script {
                    echo '–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ NuGet –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...'
                    sh 'dotnet restore ${SOLUTION_FILE}'
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    echo '–ö–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ...'
                    sh 'dotnet build ${SOLUTION_FILE} --configuration Release --no-restore'
                }
            }
        }
        
        stage('Run All Tests') {
            steps {
                script {
                    echo '–ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ...'
                    
                    // –ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å coverage
                    sh '''
                        dotnet test ${SOLUTION_FILE} \
                            --configuration Release \
                            --no-build \
                            --logger "trx;LogFileName=test-results.trx" \
                            --collect:"XPlat Code Coverage" \
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'Pipeline –∑–∞–≤—ä—Ä—à–∏ —Å —Ä–µ–∑—É–ª—Ç–∞—Ç: ' + currentBuild.result
            }
        }
        success {
            script {
                echo '‚úÖ Pipeline –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!'
                echo 'üìä –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ'
                echo 'üìà –û—Ç—á–µ—Ç–∏—Ç–µ –∑–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ –Ω–∞ –∫–æ–¥–∞ —Å–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏'
            }
        }
        failure {
            script {
                echo '‚ùå Pipeline –∑–∞–≤—ä—Ä—à–∏ —Å –≥—Ä–µ—à–∫–∞!'
                echo 'üîç –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ª–æ–≥–æ–≤–µ—Ç–µ –∑–∞ –ø–æ–≤–µ—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
            }
        }
        unstable {
            script {
                echo '‚ö†Ô∏è Pipeline –∑–∞–≤—ä—Ä—à–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ (—Ç–µ—Å—Ç–æ–≤–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–∏)'
                echo 'üîç –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –æ—Ç —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ'
            }
        }
    }
} 