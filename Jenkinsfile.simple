pipeline {
    agent any
    
    environment {
        DOTNET_VERSION = '6.0'
        SOLUTION_FILE = 'HouseRentingSystem.sln'
        COVERAGE_DIR = 'coverage'
        TEST_RESULTS_DIR = 'test-results'
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–æ–¥–∞ –æ—Ç Git
                    checkout scm
                    echo '‚úÖ –ö–æ–¥—ä—Ç –µ –∏–∑–≤–ª–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ'
                }
            }
        }
        
        stage('Restore Dependencies') {
            steps {
                script {
                    echo '–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ NuGet –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...'
                    sh 'dotnet restore ${SOLUTION_FILE}'
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    echo '–ö–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ...'
                    sh 'dotnet build ${SOLUTION_FILE} --configuration Release --no-restore'
                }
            }
            post {
                always {
                    // –ê—Ä—Ö–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ build –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏
                    archiveArtifacts artifacts: '**/bin/Release/**/*.dll', fingerprint: true
                    archiveArtifacts artifacts: '**/bin/Release/**/*.exe', fingerprint: true
                }
            }
        }
        
        stage('Run All Tests') {
            steps {
                script {
                    echo '–ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ...'
                    
                    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
                    sh 'mkdir -p ${TEST_RESULTS_DIR}'
                    sh 'mkdir -p ${COVERAGE_DIR}'
                    
                    // –ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å coverage
                    sh '''
                        dotnet test ${SOLUTION_FILE} \
                            --configuration Release \
                            --no-build \
                            --logger "trx;LogFileName=test-results.trx" \
                            --results-directory ${TEST_RESULTS_DIR} \
                            --collect:"XPlat Code Coverage" \
                            --results-directory ${COVERAGE_DIR}
                    '''
                }
            }
            post {
                always {
                    // –ê—Ä—Ö–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ test —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
                    publishTestResults testResultsPattern: '${TEST_RESULTS_DIR}/**/*.trx'
                    
                    // –ê—Ä—Ö–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ coverage —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
                    archiveArtifacts artifacts: '${COVERAGE_DIR}/**/*', fingerprint: true
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'Pipeline –∑–∞–≤—ä—Ä—à–∏ —Å —Ä–µ–∑—É–ª—Ç–∞—Ç: ' + currentBuild.result
            }
        }
        success {
            script {
                echo '‚úÖ Pipeline –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!'
                echo 'üìä –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ'
                echo 'üìà –û—Ç—á–µ—Ç–∏—Ç–µ –∑–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ –Ω–∞ –∫–æ–¥–∞ —Å–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏'
            }
        }
        failure {
            script {
                echo '‚ùå Pipeline –∑–∞–≤—ä—Ä—à–∏ —Å –≥—Ä–µ—à–∫–∞!'
                echo 'üîç –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ª–æ–≥–æ–≤–µ—Ç–µ –∑–∞ –ø–æ–≤–µ—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
            }
        }
        unstable {
            script {
                echo '‚ö†Ô∏è Pipeline –∑–∞–≤—ä—Ä—à–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ (—Ç–µ—Å—Ç–æ–≤–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–∏)'
                echo 'üîç –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –æ—Ç —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ'
            }
        }
    }
} 